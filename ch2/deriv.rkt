#lang sicp
(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
; (define (make-sum a1 a2) (list '+ a1 a2))
(define (=number? a b)
  (if (and (number? a) (number? b))
      (= a b)
      false))
(define (make-sum a1 a2)
  (cond
    ((=number? a1 0) a2)
    ((=number? a2 0) a1)
    ((and (number? a1) (number? a2)) (+ a1 a2))
    (else (list '+ a1 a2))))
; (define (make-product m1 m2) (list '* m1 m2))
(define (make-product a1 a2)
  (cond
    ((=number? a1 0) 0)
    ((=number? a1 1) a2)
    ((=number? a2 0) 0)
    ((=number? a2 1) a1)
    ((and (number? a1) (number? a2)) (* a1 a2))
    (else (list '* a1 a2))))
(define (sum? x) (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s))
(define (augend s) (caddr s))
(define (product? x) (and (pair? x) (eq? (car x) '*)))
(define (multiplier s) (cadr s))
(define (multiplicand s) (caddr s))

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp) (make-sum (deriv (addend exp) var) (deriv (augend exp) var)))
        ((product? exp) (make-sum
                         (make-product (multiplicand exp)
                                       (deriv (multiplier exp) var))
                         (make-product (multiplier exp)
                                       (deriv (multiplicand exp) var))))
        (else (error "error:" exp))))
(deriv '(* (* x y) (+ x 3)) 'x)